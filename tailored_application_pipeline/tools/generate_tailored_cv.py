import json
from openai import OpenAI
from docxtpl import DocxTemplate, RichText

from tools.build_prompt import build_prompt

def load_static_cv_data(cv_data: dict, projects_info_file_path: str):
    """
    Load static project data from a JSON file and enrich the CV data.
    Args:
        cv_data (dict): The CV data generated by the LLM.
        projects_info_file_path (str): Path to the JSON file with static project details.
    Returns:
        None: The cv_data dict is modified in place.
    """
    with open(projects_info_file_path, "r", encoding="utf-8") as f:
        projects = json.load(f)

    # Normalize lookup for robustness (case-insensitive)
    projects_map = {k.strip().lower(): v for k, v in projects.items()}

    for project in cv_data.get("Relevant Projects", []):
        title = project.get("Title", "").strip().lower()
        details = projects_map.get(title, {})

        project.setdefault("Dates", details.get("Dates", ""))
        project.setdefault("Link", details.get("Link", ""))
        project.setdefault("Description", details.get("Description", ""))
        project.setdefault("Skills", project.get("Skills", []))  # always ensure list


def render_cv_to_docx(cv_data: dict, projects_info_file_path: str, template_file_path: str, output_file_path: str):
    """
    Render the CV data into a Word document using a template.
    Args:
        cv_data (dict): The CV data to render.
        projects_info_file_path (str): Path to the JSON file with static project details.
        template_file_path (str): Path to the Word document template.
        output_file_path (str): Path to save the rendered Word document.
    Returns:
        None: The document is saved to the specified path.
    """

    load_static_cv_data(cv_data, projects_info_file_path)

    doc = DocxTemplate(template_file_path)

    # Build RichText hyperlinks
    def build_project_link(link: str):
        if link:
            rt = RichText()
            rt.add("View Project", url_id=doc.build_url_id(link))
            return rt
        return ""

    context = {
        "Profile": cv_data.get("Profile", ""),
        "Key_Competencies": cv_data["Technical Skills"].get("Key Competencies", ""),
        "Programming_Languages": cv_data["Technical Skills"].get("Programming Languages", ""),
        "Frameworks_and_Libraries": cv_data["Technical Skills"].get("Frameworks & Libraries", ""),
        "Tools_and_Platforms": cv_data["Technical Skills"].get("Tools & Platforms", ""),
        "Project_1_Title": cv_data["Relevant Projects"][0]["Title"],
        "Project_1_Dates": cv_data["Relevant Projects"][0]["Dates"],
        "Project_1_Skills": cv_data["Relevant Projects"][0]["Skills"],
        "Project_1_Link": build_project_link(cv_data["Relevant Projects"][0]["Link"]),
        "Project_1_Description": cv_data["Relevant Projects"][0]["Description"],
        "Project_2_Title": cv_data["Relevant Projects"][1]["Title"],
        "Project_2_Dates": cv_data["Relevant Projects"][1]["Dates"],
        "Project_2_Skills": cv_data["Relevant Projects"][1]["Skills"],
        "Project_2_Link": build_project_link(cv_data["Relevant Projects"][1]["Link"]),
        "Project_2_Description": cv_data["Relevant Projects"][1]["Description"],
    }

    print("Rendering CV...")
    doc.render(context)
    doc.save(output_file_path)
    print(f"âœ… CV saved to {output_file_path}")


def generate_tailored_cv(path_to_job_listing: str, path_to_projects_info: str, path_to_cv_template: str, path_to_output_cv: str) -> str:
    """
    Generate a tailored CV for job listing.
    The CV is stored in a word document which the user can inspect and edit.
    If they deem it to be acceptable, they can request for it to be converted to a pdf.
    """
    try:
        client = OpenAI()

        with open(path_to_job_listing, "r", encoding="utf-8") as f:
            job_listing = f.read()

        prompt_kwargs = build_prompt(job_listing)

        response = client.responses.create(**prompt_kwargs)

        cv_data = json.loads(response.output_text)
        print(json.dumps(cv_data, indent=2))

        if len(cv_data.get("Relevant Projects", [])) < 2:
            raise ValueError("Not enough projects returned by LLM (need at least 2).")
        
        render_cv_to_docx(cv_data, path_to_projects_info, path_to_cv_template, path_to_output_cv)

    except Exception as e:
        print(f"Error generating CV: {e}")
        raise
